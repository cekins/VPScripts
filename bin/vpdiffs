#!/bin/bash

# TODO: desc

# Import functions
libDir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )/../lib/"
source ${libDir}functions.sh

# Extra variables
helpMessage="Script for creating and comparing verification points.\n\nOptions:\n\t-h  help\n\t-c  compare\n"


# Check for flags
convertVP=false
while getopts "hc" argOpts
do
	case $argOpts in
		h)
			printf "$helpMessage"
			exit 0
			;;
		c)
			convertVP=true
			;;
	esac
done

# Get screenshot directory
ssDir=$(getScreenshotDir)

# Iterate over screenshots in folder
for ssFile in $(ls "$ssDir")
do
	# Extract vp name from each screenshot
	vpName=$(getVPName $ssFile)
	vpDir=$(getVPDir)

	matchingVPs=$(getMatchingVPs $vpName)
	matchingVPs=($(sort <<<"$matchingVPs"))


	for vpFile in "${matchingVPs[@]}"
	do
		# Print name of current comparison
		echo "${vpFile#${vpDir}}:"
		# Generate comparison percent 
		echo -e "$(/opt/squish-6.4/bin/testvp --image "$vpFile" "junk" "$ssDir$ssFile")\n"
		# Compare via utility
		/opt/squish-6.4/bin/vpdiff "$vpFile" "junk" "$ssDir$ssFile"
	done


	# Check if screenshot corresponds to verification points
	if  $convertVP  && [[ -n $matchingVPs ]]
	then

		# Determine name for new vp 
		highestVP=${matchingVPs[-1]}

		# Check if string has underscore end
		if [[ $highestVP =~ .*_[0-9]+$ ]]; then
			newNumber=$((${highestVP##*_} + 1))
		else
			newNumber=1
		fi

		# Create new vp name
		newVP="${matchingVPs[0]}_$newNumber"


		# Prompt user for conversion
		read -p "Generate VP: ${newVP} (y/n)?" yn
		case $yn in 
			[Yy]* ) # Generate new vp
				/opt/squish-6.4/bin/convertvp --tovp "$newVP" "$ssDir$ssFile" "WIDGET_NAME_PLACEHOLDER"

				echo "New vp:"
				echo $newVP
				

		esac
	fi	
				

done
